---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build
  namespace: rust-rest-build
spec:
  params:
    - name: source-repo-url
      type: string
    - name: git-revision-short
      type: string
    - name: deployment-repo-url
      type: string
  tasks:
    - name: git-clone-source
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: $(params.source-repo-url)
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: pipeline-ws1
    - name: get-is-tag
      taskRef:
        name: is-tags
        kind: Task
      params:
        - name: git-tag
          value: "$(params.git-revision-short)"
      workspaces:
        - name: git-source
          workspace: pipeline-ws1
    - name: rust-test
      when:
        - input: "$(params.git-revision-short)"
          operator: notin
          values:
            - "$(tasks.get-is-tag.results.is-tag)"
      taskRef:
        name: rust-unit-test
        kind: Task
      runAfter:
        - git-clone-source
        - get-is-tag
      workspaces:
        - name: git-source
          workspace: pipeline-ws1
    - name: build-and-push
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter:
        - rust-test
      params:
        - name: TLSVERIFY
          value: "false"
        - name: IMAGE
          value: image-registry.openshift-image-registry.svc:5000/rust-rest-build/rust-rest:$(params.git-revision-short)
      workspaces:
        - name: source
          workspace: pipeline-ws1
    - name: get-deployment-repo
      taskRef:
        name: git-clone
        kind: ClusterTask
      runAfter:
        - build-and-push
      params:
        - name: url
          value: $(params.deployment-repo-url)
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: app-deployment-source
    - name: set-revision
      taskRef:
        name: update-revision
        kind: Task
      runAfter:
        - get-deployment-repo
      params:
        - name: env
          value: dev
        - name: revision
          value: "$(params.git-revision-short)"
      workspaces:
        - name: deployment-repo-source
          workspace: app-deployment-source
    - name: push-deployment
      taskRef:
        name: git-cli
        kind: ClusterTask
      runAfter:
        - set-revision
      params:
        - name: GIT_USER_NAME
          value: Tekton git bot
        - name: GIT_USER_EMAIL
          value: tekton@tekton-pipelines.dev
        - name: GIT_SCRIPT
          value: |
            git status
            git diff
            git commit -a -m "Update to revision $(params.git-revision-short)"
            git push origin HEAD:main
      workspaces:
        - name: source
          workspace: app-deployment-source
        - name: input
          workspace: dummy
#    - name: test-and-build
#      when:
#        - input: "$(tasks.git-clone-source.results.commit)"
#          operator: notin
#          values:
#            - "$(tasks.get-is-tag.results.is-tag)"
#      taskRef:
#        name: rust-unit-and-build
#        kind: Task
#      runAfter:
#        - git-clone-source
#        - get-is-tag
#      params:
#        - name: commit
#          value: "$(tasks.git-clone-source.results.commit)"
#        - name: tag
#          value: "$(tasks.get-is-tag.results.is-tag)"
#      resources:
#        outputs:
#          - name: image
#            resource: image
#      workspaces:
#        - name: git-source
#          workspace: pipeline-ws1
  workspaces:
    - name: pipeline-ws1
    - name: app-deployment-source
    - name: dummy
